buildscript {
    ext.cubaVersion = '7.2.10'
    repositories {
        mavenLocal()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username('cuba')
                password('cuba123')
            }
        }
        maven {
            url 'http://apps.uco.kz/nexus/content/groups/uco-group/'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'uco')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : '!uco@')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def modulePrefix = 'tsadv'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def guiModule = project(":${modulePrefix}-gui")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'kz.uco.tsadv'
        version = "2.0.564"
        isSnapshot = true
    }
    tomcat {
        port = 8085
    }
    uploadRepository {
        url = 'http://apps.uco.kz/nexus/content/repositories/uco-work' // repository for uploading your artifacts
        user = 'uco'
        password = '!uco@'
    }
}

dependencies {
    appComponent("com.haulmont.reports:reports-global:$cubaVersion")
    appComponent("com.haulmont.fts:fts-global:$cubaVersion")
    appComponent("com.haulmont.charts:charts-global:$cubaVersion")
    appComponent("kz.uco.uactivity:uactivity-global:1.1.8-SNAPSHOT")
    appComponent("kz.uco.base:base-global:1.1.21-SNAPSHOT")
    appComponent('com.haulmont.addon.restapi:restapi-global:7.2.2')
    appComponent('com.haulmont.addon.helium:helium-global:0.3.1')
    appComponent('com.haulmont.addon.emailtemplates:yet-global:1.4.2')
    appComponent('com.haulmont.addon.bproc:bproc-global:1.1.3')
    appComponent('de.diedavids.cuba.dataimport:dataimport-global:0.14.1')
}

def postgres = 'org.postgresql:postgresql:42.2.9'

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
        testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
        testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
        testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    test {
        useJUnitPlatform()
    }
}

configure(globalModule) {

    dependencies {
        compile('com.ibm.icu:icu4j:61.1')
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
        compile 'com.konghq:unirest-java:3.11.11'
    }
    entitiesEnhancing {
        main { enabled = true }
    }


    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }

}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(postgres)
        testRuntime(postgres)
        compile('com.google.zxing:core:3.4.0')
        compile('com.google.zxing:javase:3.3.0')
        compile('org.telegram:telegrambots:3.3') {
            exclude group: 'javax.validation', module: 'validation-api'
        }
    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'tsadv_master'
        dbUser = 'tal'
        dbPassword = 'tal'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'tsadv_master'
        dbUser = 'tal'
        dbPassword = 'tal'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "kz/uco/tsadv/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(guiModule)

    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "kz/uco/tsadv/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-gui', modulePrefix + '-web')
    }
    task buildScssThemes(type: CubaWebScssThemeCreation)
    task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)
    assemble.dependsOn buildScssThemes

    task themesJar(type: Jar) {
        from file('themes')
        classifier = 'themes'
    }

    artifacts {
        archives themesJar
    }
}


task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start

apply from: 'extra.gradle'

task buildWar(type: CubaWarBuilding) {
    appProperties = ['cuba.automaticDatabaseUpdate': false]
    singleWar = false
}
