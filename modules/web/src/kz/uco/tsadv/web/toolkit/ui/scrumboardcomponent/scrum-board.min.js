$(function () {

    var LIST_COUNTER = 0;

    var List = function ($scrumBoardList, options) {
        this.$scrumBoardList = $scrumBoardList;
        this.$options = options;
        this.$globalOptions = $scrumBoardList.$options;
        this.$items = {};

        this._init();
    };

    List.prototype = {
        $scrumBoardList: null,
        $el: null,
        $elWrapper: null,
        $options: {},
        $items: {},
        $globalOptions: {},
        $ul: null,
        $header: null,
        $title: null,
        $form: null,
        $footer: null,
        $body: null,

        eventsSuppressed: false,

        _init: function () {
            var me = this;
            me.suppressEvents();
            if (!me.$options.id) {
                me.$options.id = 'scrum-board-list-' + (++LIST_COUNTER);
            }

            var $wrapper = $('<div class="scrum-board-wrapper col-lg-4"></div>');
            var $listWrapper = $('<div>', {
                class: 'scrum-board-list-wrapper',
                id: 'scrum-board-list-wrapper-' + LIST_COUNTER
            }).appendTo($wrapper);
            $listWrapper.append($('<i>', {
                class: 'fa fa-spinner fa-spin fa-2x fa-fw scrum-board-loading'
            }));
            var $div = $('<div id="' + me.$options.id + '" class="scrum-board-list"></div>').appendTo($listWrapper);

            if (me.$options.defaultStyle) {
                //$div.addClass(me.$options.defaultStyle);
            }
            me.$el = $div;
            me.$elWrapper = $wrapper;
            me.$header = me._createHeader();
            me._createTitle();
            me.$body = me._createBody();
            me.$ul = me._createList();
            me._columnSorting(me.$ul);

            if (me.$options.items) {
                me._createItems(me.$options.items);
            }
            me.$body.append(me.$ul, me.$form);
            if (me.$globalOptions.sortable) {
                me._enableSorting();
            }
            me.resumeEvents();

            $('.scrum-board-item').tooltip();
        },

        suppressEvents: function () {
            this.eventsSuppressed = true;
            return this;
        },

        resumeEvents: function () {
            this.eventsSuppressed = false;
            return this;
        },

        _processItemData: function (item) {
            var me = this;
            return $.extend({}, me.$globalOptions.itemOptions, item);
        },

        _createHeader: function () {
            var me = this;
            var $header = $('<div>', {
                'class': 'scrum-board-list-header'
            });
            me.$el.append($header);
            return $header;
        },
        _createTitle: function () {
            var me = this;
            if (me.$options.title !== null) {
                $('<div>', {
                    'class': 'scrum-board-list-title',
                    html: me.$options.title
                }).appendTo(me.$header);
            }

            var count = me.$options.items.length, $info = $('<div>', {
                'class': 'scrum-board-list-info',
                html: count + ' (' + Math.round(me.$scrumBoardList.$fullCount !== 0 ? (count * 100 / me.$scrumBoardList.$fullCount) : 0).toFixed(2) + '%)'
            });

            me.$header.append($info);
        },


        _createBody: function () {
            var me = this;

            var $body = $('<div>', {
                'class': 'scrum-board-list-body scrum-board-list-body-' + LIST_COUNTER,
                id: me.$options.listId
            });

            me.$el.append($body);
            return $body;
        },

        _createList: function () {
            var me = this;
            var $table = $('<table>', {
                'class': 'table table-hover sortable scrum-board-items',
                'id': 'table' + me.$options.listId
            });

            var $defArr = $('<span>', {class: 'arrow'}).append($('<span>', {class: 'glyphicon glyphicon-sort'}));

            $table.append($('<thead>').append($('<tr>').append($('<th>', {
                'data-sort': 'string',
                'data-sort-onload': 'yes',
                width: '70%',
                html: me.$options.columns[0].name
            })).append($('<th>', {
                html: me.$options.columns[1].name,
                'data-sort': 'float'
            }).append($defArr))));

            $table.append($('<tbody>'));

            me.$el.append($table);
            return $table;
        },

        _columnSorting: function ($table) {
            $table.stupidtable();

            $table.on("beforetablesort", function (event, data) {
                $(this).parents('.scrum-board-list-wrapper').addClass("disabled");
            });

            $table.on("aftertablesort", function (event, data) {
                $(this).parents('.scrum-board-list-wrapper').removeClass("disabled");

                var th = data.$th;
                th.find(".arrow").remove();
                var dir = $.fn.stupidtable.dir;

                var $arr = $('<span>', {
                    class: data.direction === dir.ASC ? 'glyphicon glyphicon-sort-by-attributes' : 'glyphicon glyphicon-sort-by-attributes-alt'
                });

                th.append($('<span>', {class: 'arrow'}).append($arr));
            });
        },

        _createItems: function (items) {
            if (items != null && items.length != 0) {
                var me = this;
                for (var i = 0; i < items.length; i++) {
                    me._addItem(items[i]);
                }
            }
        },

        _addItem: function (item) {
            var me = this;
            if (!item.id) {
                item.id = me.$scrumBoardList.getNextId();
            }
            if (me._triggerEvent('beforeItemAdd', [me, item]) !== false) {
                item = me._processItemData(item);
                me._addItemToList(item);
            }
        },

        _enableSorting: function () {
            var me = this;

            var fixHelper = function (e, ui) {
                ui.children().each(function () {
                    $(this).width($(this).width());
                });
                return ui;
            };

            var afterReceive = false, dataJson;

            me.$el.find('.scrum-board-list-body-' + LIST_COUNTER).sortable({
                items: 'tbody > tr',
                containment: '.scrum-board',
                connectWith: ".scrum-board-list-body",
                placeholder: '<tr class="empty-placeholder"><td colspan="2"></td></tr>',
                dropOnEmpty: true,
                cursor: 'move',
                revert: 70,
                helper: fixHelper,
                change: function (event, ui) {
                    $('.scrum-board-list-wrapper').removeClass('drop-zone-blue');
                    ui.placeholder.parents('.scrum-board-list-wrapper').addClass('drop-zone-blue');
                },
                start: function () {
                    var parentId = $(this).parents('.scrum-board-list-wrapper').attr('id');

                    $('.scrum-board-list-wrapper').each(function (index, value) {
                        if ($(value).attr('id') !== parentId) {
                            $(this).addClass('drop-zone');
                        }
                    });
                },

                stop: function () {
                    $('.scrum-board-list-wrapper').removeClass('drop-zone drop-zone-blue');
                },
                update: function (event, ui) {
                    if (afterReceive) {
                        $(this).find("tbody").append(ui.item);

                        me._calculateCount(dataJson.from);
                        me._calculateCount(dataJson.to);
                    } else {
                        $(this).sortable('cancel');
                    }
                    me._triggerEvent('afterItemReorder', [me, ui.item]);
                },
                receive: function (event, ui) {
                    afterReceive = true;

                    var data = {
                        id: ui.item.data('id'),
                        from: ui.sender.attr("id"),
                        to: this.id
                    };

                    dataJson = data;

                    me._triggerEvent('afterItemReceive', [me, JSON.stringify(data)]);
                }
            }).disableSelection();
        },

        _calculateCount: function (id) {
            var c = $('#table' + id + ' tbody tr:not(".empty-placeholder")').length;
            $('#scrum-board-list-' + id).find('.scrum-board-list-info').html(this._makeCount(c));
        },

        _makeCount: function (count) {
            var me = this;
            return count + ' (' + Math.round(count * 100 / me.$scrumBoardList.$fullCount).toFixed(2) + '%)';
        },

        _addItemToList: function (item) {
            var me = this;
            var $tr = $('<tr>', {
                'data-id': item.id,
                'class': 'scrum-board-item',
                'title': item.title
            });

            //add dropDown
            var $ul = $('<ul>', {class: 'dropdown-menu'});

            for (var i = 0; i < me.$options.userActions.length; i++) {
                $ul.append($('<li>').append($('<a>', {
                    html: me.$options.userActions[i].title,
                    'data-name': me.$options.userActions[i].name
                })));
            }

            var $dd = $('<div>', {
                class: "dropdown"
            }).append($('<img>', {
                'class': 'scrum-board-item-image',
                'src': item.url
            })).append(
                $('<a>', {
                    class: 'dropdown-toggle',
                    'data-toggle': 'dropdown',
                    html: item.fio
                })
                    .append($('<span class="caret">')))
                .append($ul);

            $tr.append($('<td width="70%">').append($dd));
            $tr.append($('<td>', {html: item.assessment}));

            $tr.data('matrixListItem', item);
            me.$ul.append($tr);
            me.$items[item.id] = item;
            me._triggerEvent('afterItemAdd', [me, item]);

            return $tr;
        },

        _triggerEvent: function (type, data) {
            var me = this;
            if (me.eventsSuppressed) {
                return;
            }
            if (me.$options[type] && typeof me.$options[type] === 'function') {
                return me.$options[type].apply(me, data);
            } else {
                return me.$el.trigger(type, data);
            }
        },

        _sendAjax: function (url, params) {
            var me = this;
            return $.ajax(url, me._beforeAjaxSent(params))
        },

        _beforeAjaxSent: function (params) {
            var me = this;
            var eventParams = me._triggerEvent('beforeAjaxSent', [me, params]);
            return $.extend({}, params, eventParams || {});
        }
    };
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

    var ScrumBoardList = function ($el, options) {
        LIST_COUNTER = 0;
        this.$el = $el;
        this.init(options);
    };

    ScrumBoardList.prototype = {
        $el: null,
        $lists: [],
        $options: {},
        _nextId: 1,
        $fullCount: 0,
        eventsSuppressed: false,

        init: function (options) {
            var me = this;
            me.suppressEvents();

            me.$options = this._processInput(options);
            me.$el.addClass('scrum-board row row-eq-height');
            me._calcFullCount();
            me._createLists();
            me._triggerEvent('init', [me]);
            me.resumeEvents();
        },
        _calcFullCount: function () {
            var me = this, count = 0;
            for (var i = 0; i < me.$options.lists.length; i++) {
                if (me.$options.lists[i].items) {
                    for (var j = 0; j < me.$options.lists[i].items.length; j++) {
                        count++;
                    }
                }
            }
            this.$fullCount = count;
        },
        _processInput: function (options) {
            options = $.extend({}, $.fn.scrumBoardList.DEFAULT_OPTIONS, options);
            if (options.actions.load) {
                $.ajax(options.actions.load, {
                    async: false,
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "Bearer " + options.authorizationToken); //+ for rest api security
                    }
                }).done(function (res) {
                    var json = JSON.parse(res);

                    console.log(res);

                    options.lists = json.lists;
                    options.columns = json.columns;
                    options.userActions = json.userActions;
                });
            }
            return options;
        },

        _createLists: function () {
            var me = this;
            for (var i = 0; i < me.$options.lists.length; i++) {
                me.addList(me.$options.lists[i]);
            }

            $('table.scrum-board-items tbody').css('height', Number($('.scrum-board-list-body').height()) - 55);
            return me;
        },

        destroy: function () {
            var me = this;
            if (me._triggerEvent('beforeDestroy', [me]) !== false) {
                for (var i = 0; i < me.$lists.length; i++) {
                    for (var j = 0; j < me.$lists[i].$items.length; j++) {
                        me.$lists[i].$items[j].remove();
                    }
                }

                if (me.$options.sortable) {
                    me.$el.find('.scrum-board-list-body').sortable("destroy");
                }
                me.$el.removeClass('scrum-board');
                me.$el.removeData('scrumBoardList');

                me.$el.empty();
                me._triggerEvent('afterDestroy', [me]);
            }

            return me;
        },

        addList: function (list) {
            var me = this;
            if (!(list instanceof List)) {
                list = new List(me, me._processListOptions(list));
            }
            if (me._triggerEvent('beforeListAdd', [me, list]) !== false) {
                me.$lists.push(list);
                me.$el.append(list.$elWrapper);
                list.$el.data('scrumBoardList', list);
                me._triggerEvent('afterListAdd', [me, list]);
            }
            return list;
        },

        getNextId: function () {
            return this._nextId++;
        },

        _processListOptions: function (listOptions) {
            var me = this;
            listOptions = $.extend({}, me.$options.listsOptions, listOptions);

            for (var i in me.$options) {
                if (me.$options.hasOwnProperty(i) && listOptions[i] === undefined) {
                    listOptions[i] = me.$options[i];
                }
            }
            return listOptions;
        },

        suppressEvents: function () {
            this.eventsSuppressed = true;
            return this;
        },

        resumeEvents: function () {
            this.eventsSuppressed = false;
            return this;
        },

        _triggerEvent: function (type, data) {
            var me = this;
            if (me.eventsSuppressed) {
                return;
            }
            if (me.$options[type] && typeof me.$options[type] === 'function') {
                return me.$options[type].apply(me, data);
            } else {
                return me.$el.trigger(type, data);
            }
        }
    };

    $.fn.scrumBoardList = function (option) {
        var args = arguments;
        var ret;
        return this.each(function () {
            var $this = $(this);
            var data = $this.data('scrumBoardList');
            var options = typeof option === 'object' && option;

            if (!data) {
                $this.data('scrumBoardList', (data = new ScrumBoardList($this, options)));
            }
            if (typeof option === 'string') {
                args = Array.prototype.slice.call(args, 1);
                ret = data[option].apply(data, args);
            }
        });
    };
    $.fn.scrumBoardList.DEFAULT_OPTIONS = {
        // Default options for all lists
        listsOptions: {
            id: false,
            title: '',
            listId: '',
            items: []
        },

        itemOptions: {
            id: false,
            title: '',
            url: '',
            fio: '',
            assessment: ''
        },
        columns: [],
        lists: [],
        userActions: [],
        actions: {
            'load': ''
        },
//        listId: '',
        sortable: true,
        defaultStyle: 'style-1',

        // Events
        init: null,
        beforeListAdd: null,
        afterListAdd: null,
        beforeItemAdd: null,
        afterItemAdd: null,
        beforeItemUpdate: null,
        afterListReorder: null,
        afterItemReorder: null,
        beforeAjaxSent: null,
        afterItemReceive: null,
        afterDestroy: null
    };
});